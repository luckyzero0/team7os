#WRITEUP#

Writeup for Project 4, Spring2011
04/24/2011


Team 24:	Nick Bopp		nbopp@usc.edu

			Mihir Sheth		mihirshe@usc.edu

			James Cramer	jcramer@usc.edu


---USAGE---
To build coff2noff:
	gmake coff2noff (inside the bin directory)
	
To build Nachos:
	gmake (inside the network directory)
	
To build all the tests:
	make all (inside the test directory)
	make netOffice (inside the test directory)

To run the office (MUST USE 5 SERVERS!), instructions for fewer servers are found at the end of section III:
	nachos -m 0 -o 1 (Server0)
	nachos -m 1 -o 1 (Server1)
	nachos -m 2 -o 1 (Server2)
	nachos -m 3 -o 1 (Server3)
	nachos -m 4 -o 1 (Server4)
	
	nachos -m 5 -x ../test/net10Cust (exec's 10 netCustomers)
	nachos -m 6 -x ../test/net10Cust (exec's 10 more netCustomers)
	nachos -m 7 -x ../test/netAPPM (execs 3 App Clerks, 3 Pic Clerks, 3 Passport Clerks, and 1 Manager)
	nachos -m 8 -x ../test/netCashSen (exec's 3 Senators, and 3 Cashier Clerks)


---DOCUMENTATION---

I. REQUIREMENTS

	Project 4 has two main components.  The first was to make each entity of the Passport Office a single threaded program which
	uses RPC's to share data and locking primitives with other entities.
	
	The second was to go from one server, to five fully redundant servers.  The client must randomly select which server to request from.
	That server must then forward the request to all the other servers.  Using the total ordering algorithm, all servers process all requests
	in the same order.

II. ASSUMPTIONS

	1. All servers process each request to maintain consistent state, but only the server that was originally contacted by the client
		sends a response message back.
		
	2. The number of servers is set at compile time, with the constant #define NUM_SERVERS in "system.h" in the threads directory.
		The tester must run exactly this many server processes for the application to function correctly. (Machines 0 - (NUM_SERVERS - 1)
		are the machine ID's for servers, which is used for broadcasting forwarded messages and timestamps).

III. DESIGN

	Part 1:
		In part one, we basically just had to convert our original multi-threaded Passport Office into seperate, single-threaded
		processes which communicate and synchronize through one central server.  To do this, all we really had to do was to have each
		entity call CreateXXX() for each monitor, lock, and condition that it uses.  Then the main() method for each entity just calls the
		Run() function for each entity.
		
		The  first client entity to run actually creates all the monitors / locks / condition objects on the server, and the other entities'
		CreateXXX() calls return handles to those objects.  In this way, the original synchronization is preserved, even in the distributed
		environment.
		
	Part 2:
		The second part of the assignment called for having multiple servers, all of which maintained the exact same state of RPC objects.
		We achieved this through the Total Ordering algorithm described in class.
		
		1. Client randomly selects which server to send a request to.
		2. The server generates a timestamp for this request, and forwards the request to all other servers.
		3. Servers collect the request and place it into a queue of requests to be processed, sorted by timestamp and forwarding machine ID.
		4. The servers that received a forwarded request broadcast their current timestamp to all other servers.
		5. All servers keep track of the most recent timestamp received from each other server.
		6. The server is free to process messages from its queue until the next message in the queue has a timestamp greater than the smallest
			timestamp of any the servers.
	
!! IF YOU WANT TO CHANGE THE NUMBER OF SERVERS, YOU MUST CHANGE THE FOLLOWING: !!
	In the file: "threads/system.h", change:
		#define NUM_SERVERS 5
	to
		#define NUM_SERVERS (number of servers you desire)
!!!!!!

IV. IMPLEMENTATION

	Parts 1/2:
	+ Files Modified
		- exception.cc
		- system.cc
		
		- syscall.h
		- system.h
		- synch.h/cc
		- server.cc
	
	+ Files Added
		- test/net* (all the test files prefixed with "net" are new)
		
	+ Data Structures Added
		In server.cc:
			list<Packet*> packetList; (queue for packets sorted by timestamp and server machine id)
			unsigned int lastTimestampReceived[NUM_SERVERS]; (keeps track of the last timestamp received for each server)
		
	+ Data Structures Modified
		NONE
			
	+ Functions Added
		- New syscalls
			CreateMonitorArray();
			SetMonitorArrayValue();
			GetMonitorArrayValue();
			DestroyMonitorArray();
		
		// these were all used because so much of our global data in the post office was arrays of monitors
		// this helps alot, instead of having to create 20 separate variables for each array.
		
V. TESTING

	+ How to Test
	
		See USAGE above.
		
		The .c's listed below are the tests.  For example, to build, just do "gmake forkTest".
		
		PARTS 1 AND 2: ----------------------------------------------------------------------
		
		As part one consists of just running the distributed passport office on one server,
		if you want to explicitly test part1, you'll need to redefine NUM_SERVERS in system.h
		and recompile.

		*NOTE: All of the below tests are meant to be run on a NachOS server. If you're unfamiliar, here's how to set it up:
		
		terminal1 (server):  nachos -m 0 -o 1 		
		terminal2 (client):  nachos -m 1 -x ../test/testName

		Create separate terminal window for each client and each server.
										
		
				/* testLocks.c */
		/*	Recycled from projects 2 & 3. A Quick test program to check if lock 
		*	related SYSCALLS are working over the network.
		* 	Performs a few tests to check bad construction data, as well as
		* 	Passing bad lock IDs to demonstrate attempting to acquire non-owned
		* 	locks.
		* 	The final test demonstrates a small mutex scenario, in which the final
		* 	result of raceCondition should should be 0, 5, or 10, depending on which
		* 	thread runs first, but never any value in between.
		*/

				/*testConditions.c*/
		/*
		 * Tests CVs on the network. Attempt to pass bad construction data,
		 * as well as access CVs with bad parameters.
		 * If successfully, bad CVs are not created, and
		 * t2 will run before t1.
		 * Finally, tests broadcast. If successful, all threads will
		 * exit.
		 * NOTE: This test is not designed to work with -rs'ing.
		 */
		 
				/*testMonitors.c*/
		/*
		 * Small series of tests that demonstrate Monitor syscalls over
		 * the network. Creates, sets, and retrieves the value of a
		 * monitor variable.
		 */
		 
				/*mc_wait.c and mc_signal.c*/
		/*	Start mc_wait one on client, then run mc_signal on another client.
		 *  The first client will wait to be signalled by the second.
		 *  When the mc_signal program runs, it will wake up the mc_wait, and they will both exit.
		 */
		 
		 
				/*netOffice*/
		/*
		 * Our main test was running the full PassPortOffice simulation,
		 * as it has been tested thoroughly in previous assignments and
		 * is known to work without issues. Here's how to set it up:
		 *     - in /test/, make netOffice
		 *     - in separate windows, in /network/, create 5 servers (nachos -m 0 -o 1, nachos -m 1 -o 1, etc)
		 *                *NOTE* Servers must have a NetworkID < NUM_SERVERS (which by default = 5) and there must
		 *							be EXACTLY NUM_SERVERS servers started and running for clients to work properly,
		 *							they depend on being able to randomly choose one of these NUM_SERVERS machines to send to.
		 *     - the client programs are listed below, run each in a separate terminal:
		 */

				/*net10Cust*/
		/*
		 * Creates 10 Customer processes on the network. 
		 * You will need to run this twice to ensure that
		 * 20 customers go through the passport office,
		 * otherwise the simulation will not complete.
		 */

				/*netAPPM*/
		/*
		 * Creates the Application, Picture, and Passport Clerk processes, and the
		 * manager.
		 */
		 
				/*netCashSen*/
		 /*
		  * Creates the Cashier and 3 Senator processes.
		  */
		  




VI. DISCUSSION

The only wierd issue we ran into was with backgrounding servers and clients (ex nachos -m 0 -o 1 & nachos -m 1 -o 1 etc), basically using 
one unix box for the 5 servers, and the other for the 4 client nachos. For some reason, running the simulation in this manner locks up with
more than 4 servers, but works fine for 4 or less. However, running everything on separate boxes works just fine. Not really sure why.

Also, we changed the MaxPacketSize because of the length of our timestamps and our lock and monitor names.  This only caused issues in one run
out of ~100.  It randomly failed some assertion in sysdep.cc about the length of the packet.  It had something to do with the underlying UNIX
socket call.  As I said this only happened once, and doesn't have anything to do with our simulation, so if this randomly happens to you, just
run the simulation again.

VII. MISCELLANEOUS

Please feel free to contact us if you have any questions. We'd be happy to meet to meet up and discuss any issues/what's going on in our code.
Please contact us by emailing Nick Bopp at nbopp@usc.edu.


	
