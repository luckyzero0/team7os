#WRITEUP#

Writeup for Project 1, Spring2011
02/06/2011


Team 24:	Nick Bopp		nbopp@usc.edu

			Mihir Sheth		mihirshe@usc.edu

			James Cramer	jcramer@usc.edu


---USAGE---
To build:
	gmake

To run simulation with user-input for desired numbers of things (and the "correct" print statements):
	nachos -rs XXXX

To run simulation in test mode (prints out a LOT of print statements, which helped us find all of our bugs), with automatic numbers of actors:
	nachos -rs XXXX -T

To run Part1 Test of locks / semaphores / conditions:
	nachos -rs XXXX -T1

To run our big monster mega test (compiles nrun.cc, based on the utility on the class website), runs nachos -T with all -rs args 1-9998:
	g++ -onrun nrun.cc
	nrun


---DOCUMENTATION---

I. REQUIREMENTS

	The assignment requires a simplified simulation of a passport office. The purpose of the 
	assignment is to introduce an environment where race conditions occur frequently, and need to be 
	indentified and solved. Customers must enter the office, get in a line for a clerk without 
	running into other customers, and interact with each clerk sequentially until they leave the 
	office. Clerks must ensure that they are only interacting with one customer at a time, as well as
	 punishing customers who attempt to interact before their documents have been processed 
	 (passport/cashier clerk). If clerks have nothing to do, they go on break. The manager monitors 
	 the clerks and lines, and makes sure that if there are people in line, there is at least one 
	 clerk who is available, and will wake up clerks if there are none. The manager is also largely 
	 responsible for handling the senator scenario, in which he broadcasts customers in line to go to 
	 their waiting room. Senators throw a wrench in the simulation when they enter. They must wait in 
	 their own waiting room until all customers are in the customer waiting room. They can only go 
	 through the passport office when there are no customers in the office, but otherwise, they act 
	 similarly to customers.

II. ASUMPTIONS

	1.) Object oriented is for suckas.
	2.) The simulation halts (ends) when there are no customers left. This is because all threads go to 
		sleep when there are no customers, and nachos interprets this as the program terminating.
	3.) Senators are forked after customers, and enter the passport office at the mercy of thread 
		yielding.

III. DESIGN

	We opted against object oriented design in favor of a C-style implementation, which will make 
	adaptation in future assignments easier. Rather than encapsulating data within classes, most of 
	the data, i.e. locks, CVs, states, etc,(except for a few local variables) is stored in global 
	arrays/variables. The end result is that instead of classes, we have void xxRun() functions that are
	forked into threads that use the global arrays given the index numbers of the customers/clerks. 
	Each function is essentially a dowhile(true) loop that runs until it reaches an end-state.

IV. IMPLEMENTATION

	+ Files Modified
		- synch.h
		- synch.cc
		- main.cc
	
	+ Files Added
		- office.h
		- office.cc
		- Customer.cc
		- clerk.cc
		- manager.cc
		- senator.cc
		- nrun.cc
		
	+ Data Structures Added
		- Global arrays?		-- office.h
		For each type of clerk:
			Lock* lineLock;			//Lock for each type of line (app/pic shared)
			Condition *lineCV;		//Condition for each type of line (app/pic shared)
			int regLineLength;		//Length of each regular line
			int privLineLength;		//Length of each privledged line (no priv line on cashier, due to $1600 limit, see below)
			int customerSSNs[];		//SSN of customer currently indexing with clerk
			ClerkStatus clerkStatuses[];	//Submits status of each clerk
			Lock* clerkLocks[];		//Lock for each clerk
			Condition * clerkCVs[];		//CV for each clerk
			int ClerkMoney[];		//Collects customer payments / bribes
			int clerkBribed[];		//The customer writes to this to let the clerk know he is being bribed
			
			**NOTE ABOUT CLERKS: Our output for the clerks identifies customers by their SSN. Also,
			*	it was unclear whether "procedure has completed" implied that the customer is done
			*	with the current clerk and can move on, or that the job has been processed (after the 20-100 yield
			*	calls). We have outputted the former, but you can see the latter if the simulation is run in test mode.

		For each type of actor:
			int numXXX;			//Number of that type of clerk, customer, senator
			
		int happyWithPhoto[];			//BOOL used to tell the picClerk whether or not the customer liked their picture
		int passPunish[] / cashPunish[];	//Lets the customer know whether they are punished for coming into line to early (other paperwork not filed)
			
		
	+ Data Structures Modified
		NONE
			
	+ Functions Added
		- CustomerRun()			-- Customer.cc
			//This is the main loop for customers. Terminates when finished with cashier.
		- doAppClerk()			-- Customer.cc/senator.cc
			//Helper function called in CustomerRun() to handle Application Clerk queueing/interaction
		- doPicClerk()			-- Customer.cc/senator.cc
			//Same as above, but for Picture Clerk
		- doPassClerk()			-- Customer.cc/senator.cc
			//Same as above, but for Passport Clerk
		- doCashClerk()			-- Customer.cc/senator.cc
			//Same as above, but for Cashier	
		- SenatorRun()			-- senator.cc
			//Main scheduler of the senator, behaves almost exactly the same as the senator
		- AppClerkRun() / CashClerkRun() / PicClerkRun() / PassClerkRun() -- clerks.cc
			//Scheduler of each individual type of clerk
		- ManagerRun()			-- manager.cc
			//Scheduler for running the manager

V. TESTING

	+ How to Test
	
		See USAGE above.
	
		With respect to the Test Cases outlined in the project guidelines, we would like to discuss how every run of our simulation proves these tests to be true.
		Run the simluation with the '-T' flag to see all necessary output.
		(1) Print statements declare the length of each line as it is joined.  Since the lineLock is acquired, no two customers can get in a line at once.
		(2) At the end of the simluation, the manager prints the money received from each clerk -- one at a time.
		(3) The cashPunish[] array tells the customers whether they have gotten their passport yet, and whether or not they have to get in line again.
		(4) As customers leave their lines, you will see a lot of print statements of clerks going on break.
		(5) Again, there are print statements for managers waking up on-break clerks.  If they did not get up, the simulation would never actually halt.
		(6) This is verified by the "Total Money" output line at the very end of the simulation.  Program exits with error if not enough money is collected.
			Specifically, nrun test will run the program with all possible -rs values, proving that no race conditions prevent the program from finishing
			with the correct amount of money / passports handed out.
		(7) Our '-T' print statements show how the manager flushes and reintroduces customers as senators arrive and leave.

	+ Test output
	
		-T1: Runs the Part1 tests provided by the instructors / TAs / graders.
			- This should illustrate that Lock / Semaphores / Condition classes are behaving properly and printing the correct error messages.
			  The program itself prints out what it should be doing (when threads should not finish, etc.)

		-T:  Runs our simluation with TEST flag set
			- This will give you a much more verbose set of print statements. These were enormously helpful in us debugging all of our race conditions.
			  Also, this assumes inputs of 3 of each type of cashier, 20 customers, and 3 senators. We really recommend you run in this mode, as we feel
			  our print statements are much more descriptive of what's actualling going on. Alot of the print() requirements in the output guidelines
			  are redundant, or not explicit enough.
		
		nrun: Runs "nachos -rs XXXX -T" with every value of RS up to 1 to 9998
			- We used this once we verified our simulation worked without random yielding.  Certain race conditions only occur in one or a few random
			  seeds, so we used this to verify complete and total accuracy.  It will run nachos in TEST mode, which calls exit(1) if the simluation ends
			  without all customers and senators paying and receiving passports.  nrun will exit if a -rs value causes nachos to fail.  Also, if nrun hangs
			  forever, we knew we had a race condition with that -rs value, so we were able to run it, read the TEST output, and debug.


VI. DISCUSSION

As far as we can tell, our project has no race conditions or deadlock. We used nrun to check many random seed values, and our program never broke.
All customers leave the office when senators arrive, and re-enter once they finish. Everyone leaves the office by the end. Customers and senators
are never in the office at the same time.


VII. MISCELLANEOUS

Please feel free to contact us if you have any questions. We'd be happy to meet to meet up and discuss any issues/what's going on in the simulation.
Please contact us by emailing Mihir Sheth at mihirshe@usc.edu


	
